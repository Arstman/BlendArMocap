:py:mod:`BlendArMocap.src.cgt_socket_ipc.cgt_socket_operators`
==============================================================

.. py:module:: BlendArMocap.src.cgt_socket_ipc.cgt_socket_operators


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   BlendArMocap.src.cgt_socket_ipc.cgt_socket_operators.WM_CGT_mediapipe_data_socket_operator



Functions
~~~~~~~~~

.. autoapisummary::

   BlendArMocap.src.cgt_socket_ipc.cgt_socket_operators.register
   BlendArMocap.src.cgt_socket_ipc.cgt_socket_operators.unregister



Attributes
~~~~~~~~~~

.. autoapisummary::

   BlendArMocap.src.cgt_socket_ipc.cgt_socket_operators.classes


.. py:class:: WM_CGT_mediapipe_data_socket_operator

   Bases: :py:obj:`bpy.types.Operator`

   .. py:attribute:: bl_label
      :value: 'Local Connection Listener'

      

   .. py:attribute:: bl_idname
      :value: 'wm.cgt_local_connection_listener'

      

   .. py:attribute:: bl_description
      :value: 'Receives BlendArMocaps Mediapipe Data from Local Host.'

      

   .. py:attribute:: queue
      :type: queue.Queue

      

   .. py:attribute:: processor
      :type: BlendArMocap.src.cgt_socket_ipc.cgt_core_socket.server_result_processor.ServerResultsProcessor

      

   .. py:attribute:: process
      :type: multiprocessing.Process

      

   .. py:attribute:: timer
      :type: None

      

   .. py:attribute:: server

      

   .. py:method:: execute(context)

      Initialize connection to local host and start modal. 


   .. py:method:: poll(context)
      :classmethod:


   .. py:method:: modal(context, event)

      Server runs on separate thread and pushes results in queue,
      The results are getting processed and linked to blender. 


   .. py:method:: cancel(context)

      Upon finishing connection. 



.. py:data:: classes

   

.. py:function:: register()


.. py:function:: unregister()



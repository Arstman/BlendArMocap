:py:mod:`BlendArMocap.src.cgt_transfer.core_transfer.tf_transfer_management`
============================================================================

.. py:module:: BlendArMocap.src.cgt_transfer.core_transfer.tf_transfer_management


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   BlendArMocap.src.cgt_transfer.core_transfer.tf_transfer_management.main
   BlendArMocap.src.cgt_transfer.core_transfer.tf_transfer_management.manage_object_transfer
   BlendArMocap.src.cgt_transfer.core_transfer.tf_transfer_management.remap_by_object_distance
   BlendArMocap.src.cgt_transfer.core_transfer.tf_transfer_management.remap_object_properties
   BlendArMocap.src.cgt_transfer.core_transfer.tf_transfer_management.find_chain_links
   BlendArMocap.src.cgt_transfer.core_transfer.tf_transfer_management.link_object_chain
   BlendArMocap.src.cgt_transfer.core_transfer.tf_transfer_management.get_driver_target
   BlendArMocap.src.cgt_transfer.core_transfer.tf_transfer_management.apply_constraints



Attributes
~~~~~~~~~~

.. autoapisummary::

   BlendArMocap.src.cgt_transfer.core_transfer.tf_transfer_management.ChainLink
   BlendArMocap.src.cgt_transfer.core_transfer.tf_transfer_management.chain_link_items


.. py:data:: ChainLink

   

.. py:data:: chain_link_items
   :value: []

   

.. py:function:: main(objects: List[bpy.types.Object])

   Apply list of objects containing active cgt_props. 


.. py:function:: manage_object_transfer(obj: bpy.types.Object)

   Stores chain links in global list and applies drivers which are based on single objects. 


.. py:function:: remap_by_object_distance(obj, target_obj, sub_target, target_type, properties)


.. py:function:: remap_object_properties(obj, target_obj, sub_target, target_type, properties)

   Default remap properties (from(min/max), to(min/max), factor...) 


.. py:function:: find_chain_links(chain_items: List[ChainLink]) -> Dict[bpy.types.Object, dict]

   Reconstruct chain links in trie structure. 


.. py:function:: link_object_chain(chains_dict: Dict[bpy.types.Object, dict])

   Apply chain links recursively based on obj trie structure with cgt_props. 


.. py:function:: get_driver_target(obj: bpy.types.Object) -> bpy.types.Object

   Returns a driver factory which uses an obj based on the name of the input obj.
   Deletes driver object of the same name if it exists. 


.. py:function:: apply_constraints(target_obj: Union[bpy.types.Object, bpy.types.PoseBone], obj: bpy.types.Object, driver_target: bpy.types.Object) -> None

   Apply constraint 



:py:mod:`BlendArMocap.src.cgt_core.cgt_patterns.cgt_nodes`
==========================================================

.. py:module:: BlendArMocap.src.cgt_core.cgt_patterns.cgt_nodes


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   BlendArMocap.src.cgt_core.cgt_patterns.cgt_nodes.Node
   BlendArMocap.src.cgt_core.cgt_patterns.cgt_nodes.NodeChain
   BlendArMocap.src.cgt_core.cgt_patterns.cgt_nodes.NodeChainGroup
   BlendArMocap.src.cgt_core.cgt_patterns.cgt_nodes.InputNode
   BlendArMocap.src.cgt_core.cgt_patterns.cgt_nodes.CalculatorNode
   BlendArMocap.src.cgt_core.cgt_patterns.cgt_nodes.OutputNode




.. py:class:: Node

   Bases: :py:obj:`abc.ABC`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: update(data: Any, frame: int) -> Tuple[Optional[Any], int]
      :abstractmethod:


   .. py:method:: __str__()

      Return str(self).



.. py:class:: NodeChain

   Bases: :py:obj:`Node`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:attribute:: nodes
      :type: List[Node]

      

   .. py:method:: update(data: Any, frame: int) -> Tuple[Optional[Any], int]

      Nodes executed inside a chain. 


   .. py:method:: append(node: Node)

      Appends node to the chain, order does matter. 


   .. py:method:: __str__()

      Return str(self).



.. py:class:: NodeChainGroup

   Bases: :py:obj:`Node`

   Node containing multiple node chains.
   Chains and input got to match
   Input == Output. 

   .. py:attribute:: nodes
      :type: List[NodeChain]

      

   .. py:method:: update(data: Any, frame: int) -> Tuple[Optional[Any], int]

      Push data in their designed node chains. 


   .. py:method:: __str__()

      Return str(self).



.. py:class:: InputNode

   Bases: :py:obj:`Node`

   Returns data on call. 

   .. py:method:: update(data: None, frame: int) -> Tuple[Optional[Any], int]
      :abstractmethod:



.. py:class:: CalculatorNode

   Bases: :py:obj:`Node`

   Calculate new data and changes the input shape. 

   .. py:method:: update(data: Any, frame: int) -> Tuple[Optional[Any], int]
      :abstractmethod:



.. py:class:: OutputNode

   Bases: :py:obj:`Node`

   Outputs and returns the data without changing values nor shape. 

   .. py:method:: update(data: Any, frame: int) -> Tuple[Optional[Any], int]
      :abstractmethod:




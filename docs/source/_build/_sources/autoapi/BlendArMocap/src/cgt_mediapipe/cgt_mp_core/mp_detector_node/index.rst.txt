:py:mod:`BlendArMocap.src.cgt_mediapipe.cgt_mp_core.mp_detector_node`
=====================================================================

.. py:module:: BlendArMocap.src.cgt_mediapipe.cgt_mp_core.mp_detector_node


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   BlendArMocap.src.cgt_mediapipe.cgt_mp_core.mp_detector_node.DetectorNode




.. py:class:: DetectorNode(stream: BlendArMocap.src.cgt_mediapipe.cgt_mp_core.cv_stream.Stream = None)

   Bases: :py:obj:`BlendArMocap.src.cgt_core.cgt_patterns.cgt_nodes.InputNode`

   .. py:attribute:: stream
      :type: BlendArMocap.src.cgt_mediapipe.cgt_mp_core.cv_stream.Stream

      

   .. py:attribute:: solution

      

   .. py:method:: update(*args)
      :abstractmethod:


   .. py:method:: contains_features(mp_res)
      :abstractmethod:


   .. py:method:: draw_result(s, mp_res, mp_drawings)
      :abstractmethod:


   .. py:method:: empty_data()
      :abstractmethod:


   .. py:method:: detected_data(mp_res)
      :abstractmethod:


   .. py:method:: exec_detection(mp_lib)

      Runs mediapipe detection on frame:
      -> detected_data: Detection Results.
      -> empty_data: No features detected.
      -> None: EOF or Finish. 


   .. py:method:: cvt2landmark_array(landmark_list)

      landmark_list: A normalized landmark list proto message to be annotated on the image.


   .. py:method:: __del__()



